@using HuffmanAlgorithm.Services
@using HuffmanAlgorithm.Interfaces
@using HuffmanAlgorithm.Components
@using HuffmanAlgorithm.Models
@inject IHuffmanEncoderService HuffmanEncoderService
@inject IHuffmanDecoderService HuffmanDecoderService
@inject HuffmanProcessingData _huffmanProcessingData
@implements IDisposable

<div class="huffman-encoder-component-textarea-wrapper">
    <div class="huffman-encoder-component-textarea-item">
        <h4 class="huffman-encoder-component-textarea-label">Text to encode</h4>
        <textarea @bind="_huffmanProcessingData.InputText" rows="4" placeholder="Enter text to encode"></textarea>
    </div>
    <div class="huffman-encoder-component-textarea-item">
        <button @onclick="HuffmanEncoderService.EncodeText" disabled="@_huffmanProcessingData.IsPending">Encode</button>
        <button @onclick="HuffmanDecoderService.DecodeText" disabled="@_huffmanProcessingData.IsPending">Decode</button>
    </div>
    <div class="huffman-encoder-component-textarea-item">
        <h4 class="huffman-encoder-component-textarea-label">Encoded text</h4>
        <textarea @bind="_huffmanProcessingData.EncodedText" disabled="disabled" rows="4" placeholder="Encoded text"></textarea>
    </div>
</div>
<div class="huffman-encoder-component-textarea-item">
    <h4 class="huffman-encoder-component-textarea-label">Decoded text</h4>
    <textarea @bind="_huffmanProcessingData.DecodedText" disabled="disabled" rows="4" placeholder="Decoded text"></textarea>
</div>

@code {
    protected override void OnInitialized()
    {
        HuffmanEncoderService.OnChange += StateHasChanged;
        HuffmanDecoderService.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        HuffmanEncoderService.OnChange -= StateHasChanged;
        HuffmanDecoderService.OnChange -= StateHasChanged;
    }
}
