@using HuffmanAlgorithm.Services
@using HuffmanAlgorithm.Interfaces
@using HuffmanAlgorithm.Components
@using HuffmanAlgorithm.Models
@inject IJSRuntime JSRuntime
@inject IHuffmanEncoderService HuffmanEncoderService
@inject IHuffmanGraphService HuffmanGraphService
@inject HuffmanProcessingData _huffmanProcessingData
@implements IDisposable



<h3 class="huffman-data-processing-component-title">Huffman Encoder & Decoder</h3>
<div class="huffman-data-processing-component-textarea-container">
    <HuffmanTextAreaComponent />
</div>
<div class="huffman-data-processing-component-summary-container">
    <div class="huffman-data-processing-component-summary-wrapper">
    <div class="huffman-data-processing-component-summary-frequency">
        <h4>Character Occurrence Count</h4>
        @if (_huffmanProcessingData.HuffmanFrequencies != null)
        {
            <ul>
                @foreach (var frequencies in _huffmanProcessingData.HuffmanFrequencies)
                {
                    <li>@frequencies.Key: @frequencies.Value</li>
                }
            </ul>
        }
        else
        {
            <p>No occurence count generated.</p>

        }
        <h4>Generated Huffman Codes</h4>
        @if (_huffmanProcessingData.HuffmanCodes != null)
        {
            <ul>
                @foreach (var codes in _huffmanProcessingData.HuffmanCodes)
                {
                    <li>@codes.Key: @codes.Value</li>
                }
            </ul>
        }
        else
        {
            <p>No huffman codes generated.</p>
        }
    </div>
    <div class="huffman-data-processing-component-summary-huffman-tree-container">
        <div class="huffman-data-processing-component-summary-dot-graph-wrapper">
            <h4>DOT representation of Huffman Tree</h4>
            <div class="huffman-data-processing-component-summary-dot-graph">
                @if (!string.IsNullOrEmpty(DotGraph))
                {
                    <pre>@DotGraph</pre>
                }
                else
                {
                    <p>No DOT Tree generated yet.</p>
                }
            </div>

        </div>
        <div class="huffman-data-processing-component-summary-huffman-tree-wrapper">
            <h4>GRAPH representation of Huffman Tree</h4>
            <div id="huffman-data-processing-component-summary-huffman-tree">
                @if (!string.IsNullOrEmpty(DotGraph))
                {
                    <pre></pre>
                }
                else
                {
                    <p>No GRAPH Tree generated yet.</p>
                }
            </div>
        </div>
    </div>
</div>
</div>
<div class="huffman-data-processing-component-summary-button">
    <button @onclick="RenderGraph">Display Huffman Tree</button>
</div>



@if (_huffmanProcessingData.IsPending)
{
    <p>Coding is pending...</p>
}

@code {
    private string? _previousInputText;
    private string? DotGraph;

    private async Task RenderGraph()
    {
        if (string.IsNullOrEmpty(_huffmanProcessingData.InputText)) return;

        if (_huffmanProcessingData.InputText != _previousInputText)
        {
            _huffmanProcessingData.NodeIdCounter = 0;

            DotGraph = HuffmanGraphService.GenerateDot(_huffmanProcessingData.HuffmanTree ?? new HuffmanNode());

            _previousInputText = _huffmanProcessingData.InputText;

            await JSRuntime.InvokeVoidAsync("vizRenderGraph", DotGraph);
        }
        else
        {
            Console.WriteLine("No changes detected, skipping tree generation.");
        }

        _huffmanProcessingData.IsPending = false;

    }

    protected override void OnInitialized()
    {
        HuffmanEncoderService.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        HuffmanEncoderService.OnChange -= StateHasChanged;
    }

}
