@using HuffmanAlgorithm.Services
@using HuffmanAlgorithm.Interfaces
@using HuffmanAlgorithm.Models
@inject IHuffmanEncoderService HuffmanEncoderService
@inject IHuffmanFileService HuffmanFileService
@inject HuffmanProcessingData HuffmanProcessingData
@implements IDisposable

<div class="huffman-upload-file-component-wrapper">
    <h4 class="upload-title">Upload File for Huffman Coding</h4>

    <!-- Input for selecting a file -->
    <InputFile OnChange="UploadAndReadFileAsync" />
    <br />

    <!-- Button to encode text files -->
    <button @onclick="ProcessFile" disabled="@(_selectedFile == null || !IsTextFile)">Code Text File</button>
    <p>.txt format only</p>
    <br />

    <!-- Button to encode image files -->
    <button @onclick="ProcessFile" disabled="@(_selectedFile == null || !IsImageFile)">Code Image File</button>
    <p>.jpg format only</p>
    <br />

    <!-- Button to encode binary files -->
    <button @onclick="ProcessFile" disabled="@(_selectedFile == null || IsImageFile || IsTextFile)">Code Binary File</button>
    <p>.bin format only</p>

    <!-- Display error messages -->
    @if (!string.IsNullOrEmpty(ErrorMessage))
    {
        <p class="error-message">@ErrorMessage</p>
    }
</div>

@if (HuffmanProcessingData.IsPending)
{
    <!-- Display a message when encoding is in progress -->
    <p>Encoding in progress...</p>
}
else if (!HuffmanProcessingData.IsPending && !string.IsNullOrEmpty(HuffmanProcessingData.InputText))
{
    <!-- Display a success message after encoding is complete -->
    <p>Encoding was successful!</p>
}

@code {
    // Holds the uploaded file
    private IBrowserFile? _selectedFile;

    // Error message to display to the user
    private string ErrorMessage { get; set; } = string.Empty;

    // Maximum allowed file size (e.g., 5 MB)
    private const long MaxFileSize = 5 * 1024 * 1024;

    // Check if the selected file is a text file based on its extension
    private bool IsTextFile
    {
        get
        {
            var fileName = _selectedFile?.Name;
            return !string.IsNullOrEmpty(fileName) &&
                   (fileName.EndsWith(".txt", StringComparison.OrdinalIgnoreCase));
        }
    }

    // Check if the selected file is an image file based on its extension
    private bool IsImageFile
    {
        get
        {
            var fileName = _selectedFile?.Name;
            return !string.IsNullOrEmpty(fileName) &&
                   (fileName.EndsWith(".jpg", StringComparison.OrdinalIgnoreCase) ||
                    fileName.EndsWith(".jpeg", StringComparison.OrdinalIgnoreCase) ||
                    fileName.EndsWith(".png", StringComparison.OrdinalIgnoreCase) ||
                    fileName.EndsWith(".gif", StringComparison.OrdinalIgnoreCase));
        }
    }

    // Method to handle file upload
    private async Task UploadAndReadFileAsync(InputFileChangeEventArgs e)
    {
        var file = e.File;

        if (file != null)
        {
            // Check file size
            if (file.Size > MaxFileSize)
            {
                ErrorMessage = "File is too large. Maximum allowed size is 5 MB.";
                _selectedFile = null;
                return;
            }

            // Store the selected file
            _selectedFile = file;
            // Clear previous input text and encoded text
            HuffmanProcessingData.InputText = string.Empty;
            HuffmanProcessingData.EncodedText = null;

            // Check if the file is a text file
            if (IsTextFile)
            {
                // Read the text file and store its content in InputText
                HuffmanProcessingData.InputText = await HuffmanFileService.ReadFileAsTextAsync(file);
            }
            else
            {
                // Read the binary file and convert it to Base64, then store it in InputText
                var byteArray = await HuffmanFileService.ReadFileAsBytesAsync(file);
                HuffmanProcessingData.InputText = Convert.ToBase64String(byteArray);
            }
        }
    }

    // Method to process the file (encode it)
    private void ProcessFile()
    {
        if (_selectedFile != null)
        {
            try
            {
                // Encode the text using Huffman encoding service
                HuffmanEncoderService.EncodeText();
            }
            catch (Exception ex)
            {
                // If an error occurs during encoding, set the error message
                HuffmanProcessingData.EncodedText = $"Error during encoding file: {ex.Message}";
            }
        }
    }

    // Method called when the component is initialized
    protected override void OnInitialized()
    {
        // Subscribe to the OnChange event of the encoder service to refresh the UI
        HuffmanEncoderService.OnChange += StateHasChanged;
    }

    // Cleanup method to unsubscribe from events when the component is disposed
    public void Dispose()
    {
        // Unsubscribe from the encoder service's OnChange event to prevent memory leaks
        HuffmanEncoderService.OnChange -= StateHasChanged;
    }
}
