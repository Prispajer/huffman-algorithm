@using HuffmanAlgorithm.Services
@using HuffmanAlgorithm.Interfaces;
@using HuffmanAlgorithm.Components;
@inject IHuffmanEncoderService HuffmanEncoderService
@inject IHuffmanFileService HuffmanFileService


<div class="huffman-upload-file-component-wrapper">
    <h3 class="upload-title">Upload Pliku i Kodowanie Huffmana</h3>
    <input type="file"  />
    <br />
    <button @onclick="ProcessFile" disabled="@isProcessing || string.IsNullOrEmpty(inputText)">Koduj plik</button>
    @if (encodedText != null)
    {
        <h4>Zakodowany plik:</h4>
        <pre>@encodedText</pre>
    }
</div>


@if (isProcessing)
{
    <p>Trwa kodowanie...</p>
}


@code {
    private string? inputText;
    private string? encodedText;
    private Dictionary<char, string>? huffmanCodes;
    private bool isProcessing = false;

    private async Task UploadFileAsync(InputFileChangeEventArgs e)
    {
        var file = e.File;
        inputText = await ReadFileAsync(file);
    }

    private void ProcessFile()
    {
        if (string.IsNullOrEmpty(inputText)) return;

        isProcessing = true;

        // Generowanie kodów Huffmana
        huffmanCodes = HuffmanEncoderService.GenerateHuffmanCodes(inputText);

        // Generowanie zakodowanego tekstu
        encodedText = string.Join("", inputText.Select(c => huffmanCodes[c]));

        isProcessing = false;
    }


    private async Task<string> ReadFileAsync(IBrowserFile file)
    {
        using var stream = file.OpenReadStream();
        using var reader = new StreamReader(stream);
        return await reader.ReadToEndAsync();
    }
}
