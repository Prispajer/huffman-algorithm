@inject IJSRuntime JSRuntime
@using HuffmanAlgorithm.Services
@using HuffmanAlgorithm.Interfaces
@inject IHuffmanEncoderService HuffmanEncoderService

<h3 class="huffman-encoder-component-title">Huffman Encoder & Decoder</h3>
<div class="huffman-encoder-component-textarea-container">
    <div class="huffman-encoder-component-textarea-wrapper">
        <div class="huffman-encoder-component-textarea-item">
            <h4 class="huffman-encoder-component-textarea-label">Text to encode</h4>
            <textarea @bind="inputText" rows="4" placeholder="Enter text to encode"></textarea>
        </div>
        <div class="huffman-encoder-component-textarea-item">
            <button @onclick="EncodeText" disabled="@isPending">Encode</button>
            <button @onclick="DecodeText" disabled="@isPending">Decode</button>
        </div>
        <div class="huffman-encoder-component-textarea-item">
            <h4 class="huffman-encoder-component-textarea-label">Encoded text</h4>
            <textarea @bind="encodedText" rows="4" placeholder="Encoded text"></textarea>
        </div>
    </div>
    <div class="huffman-encoder-component-textarea-item">
        <h4 class="huffman-encoder-component-textarea-label">Decoded text</h4>
        <textarea @bind="decodedText" disabled="disabled" rows="4" placeholder="Decoded text"></textarea>
    </div>
</div>

<div class="huffman-encoder-component-summary-container">
    <div class="huffman-encoder-component-summary-wrapper">
        <h4>Character Occurrence Count</h4>
        @if (huffmanFrequencies != null)
        {
            <ul>
                @foreach (var frequencies in huffmanFrequencies)
                {
                    <li>@frequencies.Key: @frequencies.Value</li>
                }
            </ul>
        }
        <h4>Generated Huffman Codes:</h4>
        @if (huffmanCodes != null)
        {
            <ul>
                @foreach (var codes in huffmanCodes)
                {
                    <li>@codes.Key: @codes.Value</li>
                }
            </ul>
        }
    </div>
    <div id="huffman-encoder-component-summary-huffman-tree">
        <button @onclick="RenderGraph">Display Huffman Tree</button>
        <div>
            <h4>DOT representation of Huffman Tree</h4>
            @if (!string.IsNullOrEmpty(dotGraph))
            {
                <pre>@dotGraph</pre> <!-- Wyświetla surowy tekst DOT -->
            }
            else
            {
                <p>No tree generated yet.</p>
            }
        </div>
        <button @onclick="RenderGraph">Render Graph</button>

    </div>
</div>

@if (isPending)
{
    <p>Coding is pending...</p>
}

@code {
    private string? inputText;
    private string? encodedText;
    private string? decodedText;
    private Dictionary<char, string>? huffmanCodes;
    private Dictionary<char, int>? huffmanFrequencies;
    private bool isPending = false;
    private string? dotGraph; 

    private async Task RenderGraph()
    {
        if (string.IsNullOrEmpty(inputText)) return;


        // Generowanie częstotliwości, kodów i drzewa Huffmana
        huffmanFrequencies = HuffmanEncoderService.CalculateOccurrenceFrequency(inputText);
        huffmanCodes = HuffmanEncoderService.GenerateHuffmanCodes(inputText);
        var priorityQueue = HuffmanEncoderService.GeneratePriorityQueue(huffmanFrequencies);
        var root = HuffmanEncoderService.GenerateHuffmanTree(priorityQueue);

        // Generowanie kodu DOT
        dotGraph = HuffmanEncoderService.GenerateDot(root);


        await JSRuntime.InvokeVoidAsync("vizRenderGraph", dotGraph);

        isPending = false;

    }

    private void EncodeText()
    {
        if (string.IsNullOrEmpty(inputText)) return;

        isPending = true;

        decodedText = "";

        // Generate frequencies of character occurrences
        huffmanFrequencies = HuffmanEncoderService.CalculateOccurrenceFrequency(inputText);

        // Generating Huffman codes
        huffmanCodes = HuffmanEncoderService.GenerateHuffmanCodes(inputText);

        // Generating the encoded text
        encodedText = string.Join("", inputText.Select(c => huffmanCodes![c]));

        isPending = false;
    }

    private void DecodeText()
    {
        if (string.IsNullOrEmpty(encodedText) || string.IsNullOrEmpty(inputText)) return;

        // Generating frequencies and tree
        huffmanFrequencies = HuffmanEncoderService.CalculateOccurrenceFrequency(inputText);
        huffmanCodes = HuffmanEncoderService.GenerateHuffmanCodes(inputText);

        var priorityQueue = HuffmanEncoderService.GeneratePriorityQueue(huffmanFrequencies);
        var root = HuffmanEncoderService.GenerateHuffmanTree(priorityQueue);

        // Decoding the text
        decodedText = HuffmanEncoderService.DecodeHuffmanData(encodedText, root);
    }
}
