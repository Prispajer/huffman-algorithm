@using HuffmanAlgorithm.Services
@using HuffmanAlgorithm.Interfaces
@using HuffmanAlgorithm.Components
@inject IJSRuntime JSRuntime
@inject IHuffmanEncoderService HuffmanEncoderService

<h3 class="huffman-encoder-component-title">Huffman Encoder & Decoder</h3>
<div class="huffman-encoder-component-textarea-container">
<HuffmanTextAreaComponent 
    InputText="@InputText" 
    EncodedText="@EncodedText" 
    DecodedText="@DecodedText" 
    IsPending="@IsPending" 
    EncodeText="EncodeText" 
    DecodeText="DecodeText" />
</div>
<div class="huffman-encoder-component-summary-container">
    <div class="huffman-encoder-component-summary-wrapper">
        <div class="huffman-encoder-component-summary-frequency">
            <h4>Character Occurrence Count</h4>
            @if (HuffmanFrequencies != null)
            {
                <ul>
                    @foreach (var frequencies in HuffmanFrequencies)
                    {
                        <li>@frequencies.Key: @frequencies.Value</li>
                    }
                </ul>
            }
            else
            {
                <p>No occurence count generated.</p>

            }
            <h4>Generated Huffman Codes</h4>
            @if (HuffmanCodes != null)
            {
                <ul>
                    @foreach (var codes in HuffmanCodes)
                    {
                        <li>@codes.Key: @codes.Value</li>
                    }
                </ul>
            }
            else
            {
                <p>No huffman codes generated.</p>
            }
        </div>
        <div class="huffman-encoder-component-summary-huffman-tree-container">
            <div class="huffman-encoder-component-summary-dot-graph">
                <h4>DOT representation of Huffman Tree</h4>
                @if (!string.IsNullOrEmpty(DotGraph))
                {
                    <pre>@DotGraph</pre>
                }
                else
                {
                    <p>No DOT Tree generated yet.</p>
                }
            </div>
            <div id="huffman-encoder-component-summary-huffman-tree">
                <h4>GRAPH representation of Huffman Tree</h4>
                @if (!string.IsNullOrEmpty(DotGraph))
                {
                    <pre>@DotGraph</pre>
                }
                else
                {
                    <p>No GRAPH Tree generated yet.</p>
                }
            </div>
        </div>
    </div>
</div>
<div class="huffman-encoder-component-summary-button">
    <button @onclick="RenderGraph">Display Huffman Tree</button>
</div>

@if (IsPending)
{
    <p>Coding is pending...</p>
}

@code {
    public string? InputText { get; set; }
    public string? EncodedText { get; set; }
    public string? DecodedText { get; set; }
    public bool IsPending { get; set; }
    private Dictionary<char, string>? HuffmanCodes;
    private Dictionary<char, int>? HuffmanFrequencies;
    private string? DotGraph;

    private async Task RenderGraph()
    {
        if (string.IsNullOrEmpty(InputText)) return;


        // Generowanie częstotliwości, kodów i drzewa Huffmana
        HuffmanFrequencies = HuffmanEncoderService.CalculateOccurrenceFrequency(InputText);
        HuffmanCodes = HuffmanEncoderService.GenerateHuffmanCodes(InputText);
        var priorityQueue = HuffmanEncoderService.GeneratePriorityQueue(HuffmanFrequencies);
        var root = HuffmanEncoderService.GenerateHuffmanTree(priorityQueue);

        // Generowanie kodu DOT
        DotGraph = HuffmanEncoderService.GenerateDot(root);


        await JSRuntime.InvokeVoidAsync("vizRenderGraph", DotGraph);

        IsPending = false;

    }

    private void EncodeText()
    {
        if (string.IsNullOrEmpty(InputText)) return;

        IsPending = true;

        DecodedText = "";

        // Generate frequencies of character occurrences
        HuffmanFrequencies = HuffmanEncoderService.CalculateOccurrenceFrequency(InputText);

        // Generating Huffman codes
        HuffmanCodes = HuffmanEncoderService.GenerateHuffmanCodes(InputText);

        // Generating the encoded text
        EncodedText = string.Join("", InputText.Select(c => HuffmanCodes![c]));

        IsPending = false;
    }

    private void DecodeText()
    {
        if (string.IsNullOrEmpty(EncodedText) || string.IsNullOrEmpty(InputText)) return;

        // Generating frequencies and tree
        HuffmanFrequencies = HuffmanEncoderService.CalculateOccurrenceFrequency(InputText);
        HuffmanCodes = HuffmanEncoderService.GenerateHuffmanCodes(InputText);

        var priorityQueue = HuffmanEncoderService.GeneratePriorityQueue(HuffmanFrequencies);
        var root = HuffmanEncoderService.GenerateHuffmanTree(priorityQueue);

        // Decoding the text
        DecodedText = HuffmanEncoderService.DecodeHuffmanData(EncodedText, root);
    }
}
